%
% M-File generated by MATLAB(R) 7.10 and the Signal Processing Toolbox 6.13.
%
% Generated on: 19-Jun-2012 14:07:33
%
%Hd = mfilt.firsrc(intf, decf);
close all;

%original parameters used
%tw = 8;
%fsin = 48;
%ast = 80;   %Stop band rejection
tw = 8;
fsin = 48;
ast = 70;

%2/3 conversion
intf = 2;  % Interpolation Factor
decf = 3;  % Decimation Factor
dr = fdesign.rsrc(intf, decf, 'Nyquist', decf, 'TW,Ast', tw, ast, fsin*intf);
hf23 = design(dr);
num = hf23.Numerator; 
fid = fopen(sprintf('tl_fracdec23_tw%1d_ast%2d.txt', tw, ast), 'w');
fprintf(fid, '------------- overall filter coefficients ----------------\r\n');
fprintf(fid, '%.10f\r\n', num);
for k = 1:intf
    fprintf(fid, '--- %1d subfilter coefficients ---\r\n', k);
    fprintf(fid, '%.10f\r\n', num(k:intf:end));
end
fclose(fid);

%3/4 conversion
intf = 3;
decf = 4;
dr = fdesign.rsrc(intf, decf, 'Nyquist', decf, 'TW,Ast', tw, ast, fsin*intf);
hf34 = design(dr);
num = hf34.Numerator; 
fid = fopen(sprintf('tl_fracdec34_tw%1d_ast%2d.txt', tw, ast), 'w');
fprintf(fid, '------------- overall filter coefficients ----------------\r\n');
fprintf(fid, '%.10f\r\n', num);
for k = 1:intf
    fprintf(fid, '--- %1d subfilter coefficients ---\r\n', k);
    fprintf(fid, '%.10f\r\n', num(k:intf:end));
end
fclose(fid);

%5/6 conversion
intf = 5;
decf = 6;
dr = fdesign.rsrc(intf, decf, 'Nyquist', decf, 'TW,Ast', tw, ast, fsin*intf);
hf56 = design(dr);
num = hf56.Numerator; 
fid = fopen(sprintf('tl_fracdec56_tw%1d_ast%2d.txt', tw, ast), 'w');
fprintf(fid, '------------- overall filter coefficients ----------------\r\n');
fprintf(fid, '%.10f\r\n', num);
for k = 1:intf
    fprintf(fid, '--- %1d subfilter coefficients ---\r\n', k);
    fprintf(fid, '%.10f\r\n', num(k:intf:end));
end
fclose(fid);

if(0)
    fig = fvtool(hf23, hf34, hf56);
    legend(fig, '2/3', '3/4', '5/6');
end


%Test fractional filters
fs = 48e3;                % 
n = 0:5120;                   %
x  = sin(2*pi*1e3/fs*n);    % Original signal, sinusoid at 1 kHz.
y = filter(hf23,x);           %
delaym = round(grpdelay(hf23, 1)/3);
%delaym = 11;            %This number is not exact
figure(100);
stem(n(1:96)/fs,x(1:96),'filled');
hold on;
% Plot interpolated signal in red
stem(n(1:64)/(fs*2/3),y(delaym+(1:64)),'r');
xlabel('Time (sec)');ylabel('Signal Value');
legend('Original Signal','Interpolated using multirate');
title('Matlab Multirate Filter 2/3');


%Test filtering with original filter and decomposed subfilters
b = hf23.Numerator;
bp1 = b(1:2:end);
bp2 = [b(2:2:end) 0];
delaym = grpdelay(hf23, 1);

x2 = upsample(x, 2);
y2 = filter(b, 1, x2);
y23 = downsample(y2, 3);

%Check the polyphase implementation
state = zeros(1, (length(b)+1)/2);
m = 1;
yp = zeros(size(y23));
for k = 1:length(x)
    state(2:end) = state(1:end-1);
    state(1) = x(k);
    
    if (mod(k, 3) == 1)
        yp(m) = sum(bp1.*state);
        m = m+1;
    elseif (mod(k, 3) == 2)
        yp(m) = sum(bp2.*state);
        m = m+1;
    end
end
%check errors
err1 = sum(y - y23);
err2 = sum(y - yp);

figure(101);
stem(n(1:96)/fs,x(1:96),'filled');
hold on;
% Plot interpolated signal in red
% The interpolated signal cannot be 100% aligned with the input signal due
% to the fractional decimation.
stem(n(1:64)/(fs*2/3), y23(round(delaym/3)+(1:64)), 'fill', 'r');
stem(n(1:64)/(fs*2/3), yp(round(delaym/3)+(1:64)), 'g');
xlabel('Time (sec)');ylabel('Signal Value')
legend('Original Signal',sprintf('DF Int (err=%.2e)', err1), ...
    sprintf('Poly Int (err = %.2e)', err2));
title('DF filter, 2/3 polyphase');

%Check Quantization effects
nbit = 12;
bq = round(b*2^nbit)/2^nbit;
bq1 = round(bp1*2^nbit)/2^nbit;
bq2 = round(bp2*2^nbit)/2^nbit;

state = 0*state;
m = 1;
yq = zeros(size(y23));
for k = 1:length(x)
    state(2:end) = state(1:end-1);
    state(1) = x(k);
    
    if (mod(k, 3) == 1)
        yq(m) = sum(bq1.*state);
        m = m+1;
    elseif (mod(k, 3) == 2)
        yq(m) = sum(bq2.*state);
        m = m+1;
    end
end
err3 = sum(yp - yq);

figure(102);
stem(n(1:96)/fs,x(1:96),'filled');
hold on;
% Plot interpolated signal in red
% The interpolated signal cannot be 100% aligned with the input signal due
% to the fractional decimation.
stem(n(1:64)/(fs*2/3), yp(round(delaym/3)+(1:64)), 'fill', 'r');
stem(n(1:64)/(fs*2/3), yq(round(delaym/3)+(1:64)), 'g');
xlabel('Time (sec)');ylabel('Signal Value')
legend('Original Signal',sprintf('Poly Int (err=%.2e)', err2), ...
    sprintf('Poly Q (err = %.2e)', err3));
title('DF filter, 2/3 with quantization');

fig = fvtool(b, 1, bq, 1);
legend(fig, 'Orig', 'Quan');

% [EOF]
